"""
Django settings for nltosql project.

Generated by 'django-admin startproject' using Django 4.2.

For more information on this file, see
https://docs.djangoproject.com/en/4.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/4.2/ref/settings/
"""

from pathlib import Path

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/4.2/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = "django-insecure-5e10f6uq_fzbpz&%*e*kuvk!cpe2z$t(*6k=!zd%xa#+5evu7t"

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = True

ALLOWED_HOSTS = []


# Application definition

INSTALLED_APPS = [
    "django.contrib.admin",
    "django.contrib.auth",
    "django.contrib.contenttypes",
    "django.contrib.sessions",
    "django.contrib.messages",
    "django.contrib.staticfiles",
]

MIDDLEWARE = [
    "django.middleware.security.SecurityMiddleware",
    "django.contrib.sessions.middleware.SessionMiddleware",
    "django.middleware.common.CommonMiddleware",
    "django.middleware.csrf.CsrfViewMiddleware",
    "django.contrib.auth.middleware.AuthenticationMiddleware",
    "django.contrib.messages.middleware.MessageMiddleware",
    "django.middleware.clickjacking.XFrameOptionsMiddleware",
]

ROOT_URLCONF = "nltosql.urls"

TEMPLATES = [
    {
        "BACKEND": "django.template.backends.django.DjangoTemplates",
        "DIRS": [
            "C:/Users/Anas/OneDrive/Desktop/QueryGenerator/nltosql/myapp/templates"
        ],
        "APP_DIRS": True,
        "OPTIONS": {
            "context_processors": [
                "django.template.context_processors.debug",
                "django.template.context_processors.request",
                "django.contrib.auth.context_processors.auth",
                "django.contrib.messages.context_processors.messages",
            ],
        },
    },
]

WSGI_APPLICATION = "nltosql.wsgi.application"


# Database
# https://docs.djangoproject.com/en/4.2/ref/settings/#databases

DATABASES = {
    "default": {
        "ENGINE": "django.db.backends.sqlite3",
        "NAME": BASE_DIR / "db.sqlite3",
    }
}


# Password validation
# https://docs.djangoproject.com/en/4.2/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        "NAME": "django.contrib.auth.password_validation.UserAttributeSimilarityValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.MinimumLengthValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.CommonPasswordValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.NumericPasswordValidator",
    },
]


# Internationalization
# https://docs.djangoproject.com/en/4.2/topics/i18n/

LANGUAGE_CODE = "en-us"

TIME_ZONE = "UTC"

USE_I18N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/4.2/howto/static-files/

STATIC_URL = "static/"

# Default primary key field type
# https://docs.djangoproject.com/en/4.2/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = "django.db.models.BigAutoField"

from langchain import OpenAI, LLMChain
import os
from datetime import datetime
from langchain.prompts.few_shot import FewShotPromptTemplate
from langchain.prompts.prompt import PromptTemplate
import re
import sqlparse


def extract_schema(s):
    # extract table names from the create table statements
    table_names = re.findall(r"(TABLE +\w+ *\()", s, flags=re.IGNORECASE)
    table_names = [
        re.sub("table", "", table_name[:-1], flags=re.IGNORECASE).strip()
        for table_name in table_names
    ]

    # Extract column names

    column_pattern = re.compile(r"(\w+)\s+([\w()]+)(?:\s+PRIMARY KEY)?(?:,)?")
    columns = column_pattern.findall(s)

    columns = [c for c in columns if "TABLE" not in c]
    table_name = ""
    columns_names = []
    for col in columns:
        if "(" in col:
            table_name = col[0]
            continue
        else:
            columns_names.append(table_name + "." + col[0] + " " + col[1])

    # result = []
    # for table_name, columns in table_names:

    # for column, col_type in columns_list:
    #    result.append(f'{table_name}.{column} {col_type}')

    columns_names = ",".join(columns_names)
    table_names = ",".join(table_names)

    return table_names, columns_names


#EXTRACT_SCHEMA = extract_schema


os.environ["OPENAI_API_KEY"] = "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"

llm = OpenAI(model_name="gpt-3.5-turbo", n=2)

current_time = datetime.now().strftime("%Y_%m_%d-%H_%M_%S")

_DEFAULT_TEMPLATE = """
                        I prioritize the description of columns, followed by column names and table names when generating SQL queries. 
                        Please generate an SQL query that answers the question "{question}" based on my database informations in the following json file:

                        ---------- Start of Json File ----------
                        {json_file_content}
                        ---------- End of Json File -----------
                        
                        Here is some examples:
                        "question": "Find the total amount use for each value of system product code and authorization number",
                        "answer": 
                            SELECT a.CD_AUTO, a.NUM_AUTO, SUM(u.MNT_UTIL) AS total_utilisation
                            FROM orc_autorisation a
                            JOIN orc_utilisation u
                            ON a.CD_AUTO = u.CD_AUTO AND a.NUM_AUTO = u.NUM_AUTO
                            GROUP BY a.CD_AUTO, a.NUM_AUTO;
                            
                        "question": "Find the total revenue for each month and year",
                        "answer": 
                            SELECT orc_marche_compte.DERN_MOIS_AN AS mois, orc_marche_compte.DERN_ANNEE AS annee, SUM(orc_marche_compte.REVENUS) AS revenu_total
                            FROM orc_personne_host
                            INNER JOIN orc_marche_compte ON orc_personne_host.NUMERO_PERSONNE_HOST = orc_marche_compte.IDTFCL
                            GROUP BY orc_marche_compte.DERN_MOIS_AN, orc_marche_compte.DERN_ANNEE
                                
                                
                        "question": "get adresses and month situation for each client",
                        "answer": 
                           SELECT  orc_personne_host.CD_VILLE,orc_personne_host.VILLE,orc_personne_host.PAYSADR,orc_personne_host.CD_POST,orc_marche_compte.DERN_MOIS_AN
                           FROM orc_personne_host,orc_personne_host
                           INNER JOIN orc_marche_compte ON orc_personne_host.NUMERO_PERSONNE_HOST = orc_marche_compte.IDTFCL
                        
                        
                        Additional informations:
                        Json file has three levels:
                        The first level have table names as keys.
                        The second level contains column names for each table.
                        The third level contains as keys "type" and "description" which are the type and description for each column.

                        Write your answer here::
                    """
PROMPT = PromptTemplate(
    input_variables=["question", "json_file_content"], template=_DEFAULT_TEMPLATE
)



LLM_CHAIN = LLMChain(llm=llm, prompt=PROMPT)
